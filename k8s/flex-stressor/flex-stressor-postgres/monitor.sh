#!/bin/bash
# monitor.sh

echo "üìä Monitorando stress test Python..."

show_status() {
    echo "==================== STATUS PYTHON STRESS ===================="
    echo "üîç Pods:"
    kubectl get pods -o wide | grep -E "(postgres|stress)"
    echo ""
    echo "üìà HPA:"
    kubectl get hpa stress-postgres-python-hpa
    echo ""
    echo "üíæ Uso de recursos:"
    kubectl top pods | grep -E "(postgres|stress)"
    echo ""
    echo "üóÑÔ∏è Status PostgreSQL:"
    kubectl exec deployment/postgres -- psql -U postgres -d stressdb -c "
        SELECT 
            'Conex√µes Ativas' as metric, 
            count(*) as value 
        FROM pg_stat_activity 
        WHERE state = 'active'
        UNION ALL
        SELECT 
            'Total Conex√µes', 
            count(*) 
        FROM pg_stat_activity;
    " 2>/dev/null || echo "‚ùå Erro ao conectar no PostgreSQL"
    echo ""
    echo "üìä Dados nas tabelas:"
    kubectl exec deployment/postgres -- psql -U postgres -d stressdb -c "
        SELECT 
            'stress_data' as tabela, 
            count(*) as registros 
        FROM stress_data 
        UNION ALL
        SELECT 
            'stress_logs', 
            count(*) 
        FROM stress_logs 
        UNION ALL
        SELECT 
            'stress_metrics', 
            count(*) 
        FROM stress_metrics;
    " 2>/dev/null || echo "‚ùå Tabelas ainda n√£o criadas"
    echo ""
    echo "üî• √öltimos logs da aplica√ß√£o:"
    kubectl logs --tail=5 deployment/stress-postgres-python 2>/dev/null || echo "‚ùå Pod ainda n√£o est√° rodando"
    echo "=============================================================="
}

# Loop de monitoramento
while true; do
    clear
    show_status
    echo ""
    echo "‚è∞ Pr√≥xima atualiza√ß√£o em 15 segundos... (Ctrl+C para sair)"
    sleep 15
done