# Makefile para Memory Stress Test no Kubernetes/MicroK8s
# Uso: make [comando]

# Vari√°veis
KUBECTL := microk8s kubectl
HELM := microk8s helm3
DOCKER := docker
NAMESPACE := memory-stress-test
APP_NAME := memory-stress-app
IMAGE_NAME := memory-stress:latest
REGISTRY_IMAGE := localhost:32000/memory-stress:latest
DEPLOYMENT_FILE := simple_stress_deployment.yaml

# Cores para output
RED := \033[0;31m
GREEN := \033[0;32m
YELLOW := \033[1;33m
BLUE := \033[0;34m
NC := \033[0m # No Color

.PHONY: help
help: ## Mostra esta ajuda detalhada
	@echo ""
	@echo "$(BLUE)============================================================================"
	@echo "                    Memory Stress Test - Makefile"
	@echo "============================================================================$(NC)"
	@echo ""
	@echo "$(GREEN)DESCRI√á√ÉO:$(NC)"
	@echo "  Makefile para gerenciar aplica√ß√£o de teste de stress de mem√≥ria"
	@echo "  usando √°rvore bin√°ria em ambiente Kubernetes/MicroK8s."
	@echo ""
	@echo "$(GREEN)USO:$(NC)"
	@echo "  make [comando] [VARI√ÅVEL=valor]"
	@echo ""
	@echo "$(GREEN)COMANDOS PRINCIPAIS:$(NC)"
	@echo ""
	@echo "  $(YELLOW)üì¶ INSTALA√á√ÉO E DEPLOY$(NC)"
	@echo "  $(BLUE)make install$(NC)              Instala√ß√£o completa (recomendado para primeira vez)"
	@echo "  $(BLUE)make setup$(NC)                Configura ambiente (addons, kubeconfig)"
	@echo "  $(BLUE)make build$(NC)                Build da imagem Docker local"
	@echo "  $(BLUE)make import$(NC)               Importa imagem para MicroK8s"
	@echo "  $(BLUE)make deploy$(NC)               Deploy da aplica√ß√£o no Kubernetes"
	@echo ""
	@echo "  $(YELLOW)üóëÔ∏è  DESINSTALA√á√ÉO$(NC)"
	@echo "  $(BLUE)make uninstall$(NC)            Remove aplica√ß√£o do Kubernetes"
	@echo "  $(BLUE)make clean$(NC)                Remove aplica√ß√£o + imagens Docker"
	@echo ""
	@echo "  $(YELLOW)üìä MONITORAMENTO$(NC)"
	@echo "  $(BLUE)make status$(NC)               Mostra status geral (pods, deployments, etc)"
	@echo "  $(BLUE)make logs$(NC)                 Logs em tempo real (Ctrl+C para sair)"
	@echo "  $(BLUE)make logs-tail$(NC)            √öltimas 100 linhas dos logs"
	@echo "  $(BLUE)make top$(NC)                  Uso de CPU e Mem√≥ria dos pods"
	@echo "  $(BLUE)make watch$(NC)                Monitora pods continuamente"
	@echo "  $(BLUE)make events$(NC)               Eventos do namespace"
	@echo "  $(BLUE)make describe$(NC)             Detalhes completos dos pods"
	@echo ""
	@echo "  $(YELLOW)‚öôÔ∏è  GERENCIAMENTO$(NC)"
	@echo "  $(BLUE)make restart$(NC)              Reinicia a aplica√ß√£o"
	@echo "  $(BLUE)make shell$(NC)                Abre shell dentro do pod"
	@echo "  $(BLUE)make scale REPLICAS=N$(NC)     Escala aplica√ß√£o (ex: make scale REPLICAS=3)"
	@echo ""
	@echo "  $(YELLOW)üîß CONFIGURA√á√ÉO$(NC)"
	@echo "  $(BLUE)make config-memory MB=N$(NC)   Define mem√≥ria target em MB"
	@echo "                             Exemplo: make config-memory MB=800"
	@echo "  $(BLUE)make config-duration SEC=N$(NC) Define dura√ß√£o em segundos"
	@echo "                             Exemplo: make config-duration SEC=1800"
	@echo ""
	@echo "  $(YELLOW)üß™ TESTES PR√â-CONFIGURADOS$(NC)"
	@echo "  $(BLUE)make test-basic$(NC)           Teste b√°sico: 500MB por 10 minutos"
	@echo "  $(BLUE)make test-intense$(NC)         Teste intensivo: 800MB por 30 minutos"
	@echo "  $(BLUE)make test-oom$(NC)             Teste OOMKill: for√ßa limite (1500MB)"
	@echo ""
	@echo "  $(YELLOW)üõ†Ô∏è  DESENVOLVIMENTO$(NC)"
	@echo "  $(BLUE)make dev$(NC)                  Build + Import + Restart + Logs"
	@echo "  $(BLUE)make info$(NC)                 Informa√ß√µes do sistema"
	@echo "  $(BLUE)make check-microk8s$(NC)       Verifica se MicroK8s est√° OK"
	@echo ""
	@echo "$(GREEN)VARI√ÅVEIS DISPON√çVEIS:$(NC)"
	@echo "  REPLICAS     N√∫mero de r√©plicas (padr√£o: 1)"
	@echo "  MB           Mem√≥ria target em MB (padr√£o: 500)"
	@echo "  SEC          Dura√ß√£o em segundos (padr√£o: 3600)"
	@echo ""
	@echo "$(GREEN)EXEMPLOS DE USO:$(NC)"
	@echo ""
	@echo "  $(YELLOW)# Instala√ß√£o inicial$(NC)"
	@echo "  make install"
	@echo ""
	@echo "  $(YELLOW)# Ver logs em tempo real$(NC)"
	@echo "  make logs"
	@echo ""
	@echo "  $(YELLOW)# Escalar para 3 r√©plicas$(NC)"
	@echo "  make scale REPLICAS=3"
	@echo ""
	@echo "  $(YELLOW)# Configurar para usar 1GB de RAM por 1 hora$(NC)"
	@echo "  make config-memory MB=1000"
	@echo "  make config-duration SEC=3600"
	@echo ""
	@echo "  $(YELLOW)# Executar teste intensivo$(NC)"
	@echo "  make test-intense"
	@echo ""
	@echo "  $(YELLOW)# Ciclo de desenvolvimento$(NC)"
	@echo "  # 1. Editar c√≥digo"
	@echo "  nano memory_stress.py"
	@echo "  # 2. Rebuild e restart"
	@echo "  make dev"
	@echo ""
	@echo "  $(YELLOW)# Desinstalar tudo$(NC)"
	@echo "  make clean"
	@echo "  make clean"
	@echo ""
	@echo "$(GREEN)WORKFLOW RECOMENDADO:$(NC)"
	@echo ""
	@echo "  1. $(BLUE)make install$(NC)              ‚Üí Instala tudo pela primeira vez"
	@echo "  2. $(BLUE)make status$(NC)               ‚Üí Verifica se est√° rodando"
	@echo "  3. $(BLUE)make logs$(NC)                 ‚Üí Acompanha execu√ß√£o"
	@echo "  4. $(BLUE)make test-basic$(NC)           ‚Üí Executa teste b√°sico"
	@echo "  5. $(BLUE)make top$(NC)                  ‚Üí Monitora recursos"
	@echo "  6. $(BLUE)make uninstall$(NC)            ‚Üí Remove quando terminar"
	@echo ""
	@echo "$(GREEN)TROUBLESHOOTING:$(NC)"
	@echo ""
	@echo "  $(YELLOW)Pod n√£o inicia?$(NC)"
	@echo "    make describe"
	@echo "    make events"
	@echo ""
	@echo "  $(YELLOW)Ver logs de erro?$(NC)"
	@echo "    make logs-tail"
	@echo ""
	@echo "  $(YELLOW)Problemas com imagem?$(NC)"
	@echo "    make build"
	@echo "    make import"
	@echo ""
	@echo "  $(YELLOW)MicroK8s n√£o responde?$(NC)"
	@echo "    make check-microk8s"
	@echo ""
	@echo "$(GREEN)DOCUMENTA√á√ÉO:$(NC)"
	@echo "  Para mais detalhes sobre cada comando, veja os coment√°rios no Makefile"
	@echo "  ou execute: make [comando]"
	@echo ""
	@echo "$(BLUE)============================================================================$(NC)"
	@echo ""

.PHONY: check-microk8s
check-microk8s: ## Verifica se MicroK8s est√° instalado e rodando
	@echo "$(YELLOW)Verificando MicroK8s...$(NC)"
	@command -v microk8s >/dev/null 2>&1 || { echo "$(RED)‚ùå MicroK8s n√£o encontrado!$(NC)"; exit 1; }
	@microk8s status --wait-ready >/dev/null 2>&1 || { echo "$(RED)‚ùå MicroK8s n√£o est√° rodando!$(NC)"; exit 1; }
	@echo "$(GREEN)‚úì MicroK8s est√° rodando$(NC)"

.PHONY: setup
setup: check-microk8s ## Configura o ambiente (addons, kubeconfig)
	@echo "$(YELLOW)Configurando ambiente...$(NC)"
	@microk8s enable dns
	@microk8s enable metrics-server
	@mkdir -p ~/.kube
	@microk8s config > ~/.kube/config
	@export KUBECONFIG=~/.kube/config
	@echo "$(GREEN)‚úì Ambiente configurado$(NC)"

.PHONY: build
build: ## Faz build da imagem Docker
	@echo "$(YELLOW)Building imagem Docker...$(NC)"
	@$(DOCKER) build -t $(IMAGE_NAME) .
	@echo "$(GREEN)‚úì Imagem criada: $(IMAGE_NAME)$(NC)"

.PHONY: build-registry
build-registry: setup ## Faz build e push para registry local do MicroK8s
	@echo "$(YELLOW)Habilitando registry...$(NC)"
	@microk8s enable registry
	@echo "$(YELLOW)Building e enviando para registry local...$(NC)"
	@$(DOCKER) build -t $(REGISTRY_IMAGE) .
	@$(DOCKER) push $(REGISTRY_IMAGE)
	@echo "$(GREEN)‚úì Imagem enviada para registry local$(NC)"

.PHONY: import
import: build ## Importa imagem para o MicroK8s
	@echo "$(YELLOW)Importando imagem para MicroK8s...$(NC)"
	@$(DOCKER) save $(IMAGE_NAME) > memory-stress.tar
	@microk8s ctr image import memory-stress.tar
	@rm -f memory-stress.tar
	@echo "$(GREEN)‚úì Imagem importada$(NC)"

.PHONY: deploy
deploy: import ## Faz deploy completo da aplica√ß√£o
	@echo "$(YELLOW)Fazendo deploy da aplica√ß√£o...$(NC)"
	@$(KUBECTL) apply -f $(DEPLOYMENT_FILE)
	@echo "$(GREEN)‚úì Deploy realizado$(NC)"
	@echo "$(YELLOW)Aguardando pods ficarem prontos...$(NC)"
	@$(KUBECTL) wait --for=condition=ready pod -l app=memory-stress -n $(NAMESPACE) --timeout=120s || true
	@echo "$(GREEN)‚úì Aplica√ß√£o est√° rodando!$(NC)"

.PHONY: install
install: setup build import deploy ## Instala√ß√£o completa (setup + build + deploy)
	@echo ""
	@echo "$(GREEN)=========================================="
	@echo "‚úì Instala√ß√£o completa!"
	@echo "==========================================$(NC)"
	@$(MAKE) status

.PHONY: uninstall
uninstall: ## Remove completamente a aplica√ß√£o
	@echo "$(RED)Removendo aplica√ß√£o...$(NC)"
	@$(KUBECTL) delete namespace $(NAMESPACE) --ignore-not-found=true
	@$(KUBECTL) delete -f $(DEPLOYMENT_FILE) --ignore-not-found=true
	@echo "$(YELLOW)Aguardando namespace ser removido...$(NC)"
	@while $(KUBECTL) get namespace $(NAMESPACE) >/dev/null 2>&1; do sleep 1; done
	@echo "$(GREEN)‚úì Aplica√ß√£o removida$(NC)"

.PHONY: clean
clean: uninstall ## Remove aplica√ß√£o e imagens Docker
	@echo "$(YELLOW)Removendo imagens Docker...$(NC)"
	@$(DOCKER) rmi $(IMAGE_NAME) 2>/dev/null || true
	@$(DOCKER) rmi $(REGISTRY_IMAGE) 2>/dev/null || true
	@microk8s ctr images rm docker.io/library/memory-stress:latest 2>/dev/null || true
	@microk8s ctr images rm $(REGISTRY_IMAGE) 2>/dev/null || true
	@rm -f memory-stress.tar
	@echo "$(GREEN)‚úì Limpeza completa$(NC)"

.PHONY: status
status: ## Mostra status da aplica√ß√£o
	@echo ""
	@echo "$(BLUE)=========================================="
	@echo "Status da Aplica√ß√£o"
	@echo "==========================================$(NC)"
	@echo ""
	@echo "$(YELLOW)Pods:$(NC)"
	@$(KUBECTL) get pods -n $(NAMESPACE) 2>/dev/null || echo "  Namespace n√£o existe"
	@echo ""
	@echo "$(YELLOW)Deployments:$(NC)"
	@$(KUBECTL) get deployments -n $(NAMESPACE) 2>/dev/null || echo "  Namespace n√£o existe"
	@echo ""
	@echo "$(YELLOW)Services:$(NC)"
	@$(KUBECTL) get services -n $(NAMESPACE) 2>/dev/null || echo "  Namespace n√£o existe"
	@echo ""
	@echo "$(YELLOW)HPA:$(NC)"
	@$(KUBECTL) get hpa -n $(NAMESPACE) 2>/dev/null || echo "  Namespace n√£o existe"
	@echo ""

.PHONY: logs
logs: ## Mostra logs da aplica√ß√£o em tempo real
	@echo "$(YELLOW)Logs da aplica√ß√£o (Ctrl+C para sair):$(NC)"
	@$(KUBECTL) logs -f deployment/$(APP_NAME) -n $(NAMESPACE)

.PHONY: logs-tail
logs-tail: ## Mostra √∫ltimas 100 linhas dos logs
	@$(KUBECTL) logs deployment/$(APP_NAME) -n $(NAMESPACE) --tail=100

.PHONY: top
top: ## Mostra uso de recursos (CPU/Mem√≥ria)
	@echo "$(YELLOW)Uso de recursos:$(NC)"
	@$(KUBECTL) top pods -n $(NAMESPACE)

.PHONY: describe
describe: ## Mostra detalhes completos dos pods
	@$(KUBECTL) describe pod -n $(NAMESPACE)

.PHONY: shell
shell: ## Abre shell dentro do pod
	@echo "$(YELLOW)Abrindo shell no pod...$(NC)"
	@$(KUBECTL) exec -it deployment/$(APP_NAME) -n $(NAMESPACE) -- /bin/bash

.PHONY: restart
restart: ## Reinicia a aplica√ß√£o
	@echo "$(YELLOW)Reiniciando aplica√ß√£o...$(NC)"
	@$(KUBECTL) rollout restart deployment/$(APP_NAME) -n $(NAMESPACE)
	@$(KUBECTL) rollout status deployment/$(APP_NAME) -n $(NAMESPACE)
	@echo "$(GREEN)‚úì Aplica√ß√£o reiniciada$(NC)"

.PHONY: scale
scale: ## Escala a aplica√ß√£o (uso: make scale REPLICAS=3)
	@echo "$(YELLOW)Escalando para $(REPLICAS) r√©plicas...$(NC)"
	@$(KUBECTL) scale deployment/$(APP_NAME) --replicas=$(REPLICAS) -n $(NAMESPACE)
	@echo "$(GREEN)‚úì Aplica√ß√£o escalada$(NC)"

.PHONY: config-memory
config-memory: ## Configura mem√≥ria target (uso: make config-memory MB=800)
	@echo "$(YELLOW)Configurando mem√≥ria para $(MB)MB...$(NC)"
	@$(KUBECTL) set env deployment/$(APP_NAME) MEMORY_TARGET_MB=$(MB) -n $(NAMESPACE)
	@echo "$(GREEN)‚úì Configura√ß√£o aplicada$(NC)"

.PHONY: config-duration
config-duration: ## Configura dura√ß√£o do teste (uso: make config-duration SEC=1800)
	@echo "$(YELLOW)Configurando dura√ß√£o para $(SEC) segundos...$(NC)"
	@$(KUBECTL) set env deployment/$(APP_NAME) DURATION_SECONDS=$(SEC) -n $(NAMESPACE)
	@echo "$(GREEN)‚úì Configura√ß√£o aplicada$(NC)"

.PHONY: test-basic
test-basic: ## Teste b√°sico: 500MB por 10 minutos
	@echo "$(BLUE)Executando teste b√°sico (500MB, 10min)...$(NC)"
	@$(KUBECTL) set env deployment/$(APP_NAME) MEMORY_TARGET_MB=500 DURATION_SECONDS=600 -n $(NAMESPACE)
	@$(MAKE) logs

.PHONY: test-intense
test-intense: ## Teste intensivo: 800MB por 30 minutos
	@echo "$(BLUE)Executando teste intensivo (800MB, 30min)...$(NC)"
	@$(KUBECTL) set env deployment/$(APP_NAME) MEMORY_TARGET_MB=800 DURATION_SECONDS=1800 -n $(NAMESPACE)
	@$(MAKE) logs

.PHONY: test-oom
test-oom: ## Teste OOMKill: for√ßar limite de mem√≥ria
	@echo "$(RED)Executando teste de OOMKill (1500MB)...$(NC)"
	@$(KUBECTL) set env deployment/$(APP_NAME) MEMORY_TARGET_MB=1500 DURATION_SECONDS=300 -n $(NAMESPACE)
	@$(MAKE) logs

.PHONY: events
events: ## Mostra eventos do namespace
	@$(KUBECTL) get events -n $(NAMESPACE) --sort-by='.lastTimestamp'

.PHONY: watch
watch: ## Monitora pods em tempo real
	@watch -n 2 '$(KUBECTL) get pods -n $(NAMESPACE)'

.PHONY: dev
dev: build import restart logs ## Modo desenvolvimento: build, import, restart e logs

.PHONY: info
info: ## Mostra informa√ß√µes √∫teis
	@echo ""
	@echo "$(BLUE)=========================================="
	@echo "Informa√ß√µes do Sistema"
	@echo "==========================================$(NC)"
	@echo ""
	@echo "$(YELLOW)MicroK8s:$(NC)"
	@microk8s version || echo "  N√£o dispon√≠vel"
	@echo ""
	@echo "$(YELLOW)Kubectl:$(NC)"
	@$(KUBECTL) version --short 2>/dev/null || echo "  N√£o dispon√≠vel"
	@echo ""
	@echo "$(YELLOW)Docker:$(NC)"
	@$(DOCKER) --version || echo "  N√£o dispon√≠vel"
	@echo ""
	@echo "$(YELLOW)Nodes:$(NC)"
	@$(KUBECTL) get nodes
	@echo ""
	@echo "$(YELLOW)Namespaces:$(NC)"
	@$(KUBECTL) get namespaces
	@echo ""

# Valores padr√£o
REPLICAS ?= 1
MB ?= 500
SEC ?= 3600