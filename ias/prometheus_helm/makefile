# Makefile para instala√ß√£o do Prometheus no MicroK8s
# Configura√ß√µes
NAMESPACE = prometheus
RELEASE_NAME = prometheus
DOMAIN = prometheus.local
INGRESS_CLASS = nginx

.PHONY: help check-microk8s enable-addons add-helm-repo install-prometheus expose-nodeport expose-ingress status clean uninstall

# Comando padr√£o
help:
	@echo "Makefile para Prometheus no MicroK8s"
	@echo ""
	@echo "Comandos dispon√≠veis:"
	@echo "  check-microk8s    - Verificar status do MicroK8s"
	@echo "  enable-addons     - Habilitar addons necess√°rios"
	@echo "  add-helm-repo     - Adicionar reposit√≥rio do Prometheus"
	@echo "  install-prometheus - Instalar Prometheus"
	@echo "  expose-nodeport   - Expor via NodePort (acesso direto)"
	@echo "  expose-ingress    - Expor via Ingress (recomendado)"
	@echo "  status            - Verificar status da instala√ß√£o"
	@echo "  port-forward      - Criar port-forward local (porta 9090)"
	@echo "  clean             - Limpar recursos"
	@echo "  uninstall         - Desinstalar completamente"
	@echo "  install-all       - Instala√ß√£o completa (addons + prometheus + ingress)"

# Verificar se MicroK8s est√° rodando
check-microk8s:
	@echo "üîç Verificando status do MicroK8s..."
	microk8s status --wait-ready
	microk8s kubectl get nodes

# Habilitar addons necess√°rios
enable-addons:
	@echo "üîß Habilitando addons do MicroK8s..."
	microk8s enable dns
	microk8s enable hostpath-storage
	microk8s enable helm3
	microk8s enable ingress
	@echo "‚úÖ Addons habilitados!"

# Adicionar reposit√≥rio do Helm
add-helm-repo:
	@echo "üì¶ Adicionando reposit√≥rio do Prometheus..."
	microk8s helm3 repo add prometheus-community https://prometheus-community.github.io/helm-charts
	microk8s helm3 repo update
	@echo "‚úÖ Reposit√≥rio adicionado!"

# Instalar Prometheus
install-prometheus:
	@echo "üöÄ Instalando Prometheus..."
	microk8s helm3 install $(RELEASE_NAME) prometheus-community/prometheus \
		--namespace $(NAMESPACE) \
		--create-namespace \
		--set server.persistentVolume.enabled=true \
		--set server.persistentVolume.size=1Gi \
		--set alertmanager.enabled=true \
		--set nodeExporter.enabled=true \
		--set pushgateway.enabled=true \
		--wait
	@echo "‚úÖ Prometheus instalado!"

# Expor via NodePort (acesso direto via IP do n√≥)
expose-nodeport:
	@echo "üåê Expondo Prometheus via NodePort..."
	microk8s kubectl patch svc $(RELEASE_NAME)-server -n $(NAMESPACE) -p '{"spec":{"type":"NodePort","ports":[{"port":80,"nodePort":30090,"targetPort":9090}]}}'
	@echo "‚úÖ Prometheus exposto na porta 30090!"
	@echo "üîó Acesse via: http://$(shell microk8s kubectl get nodes -o wide | grep -v NAME | head -1 | awk '{print $$6}'):30090"

# Expor via Ingress (recomendado para produ√ß√£o)
expose-ingress:
	@echo "üåê Criando Ingress para Prometheus..."
	@cat <<EOF | microk8s kubectl apply -f - \n\
apiVersion: networking.k8s.io/v1\n\
kind: Ingress\n\
metadata:\n\
  name: prometheus-ingress\n\
  namespace: $(NAMESPACE)\n\
  annotations:\n\
    nginx.ingress.kubernetes.io/rewrite-target: /\n\
spec:\n\
  ingressClassName: $(INGRESS_CLASS)\n\
  rules:\n\
  - host: $(DOMAIN)\n\
    http:\n\
      paths:\n\
      - path: /\n\
        pathType: Prefix\n\
        backend:\n\
          service:\n\
            name: $(RELEASE_NAME)-server\n\
            port:\n\
              number: 80\n\
EOF
	@echo "‚úÖ Ingress criado!"
	@echo "üìù Adicione ao /etc/hosts: $(shell microk8s kubectl get nodes -o wide | grep -v NAME | head -1 | awk '{print $$6}') $(DOMAIN)"
	@echo "üîó Acesse via: http://$(DOMAIN)"

# Verificar status da instala√ß√£o
status:
	@echo "üìä Status da instala√ß√£o:"
	@echo ""
	@echo "Pods:"
	microk8s kubectl get pods -n $(NAMESPACE)
	@echo ""
	@echo "Services:"
	microk8s kubectl get svc -n $(NAMESPACE)
	@echo ""
	@echo "Ingress:"
	microk8s kubectl get ingress -n $(NAMESPACE) 2>/dev/null || echo "Nenhum Ingress encontrado"
	@echo ""
	@echo "PersistentVolumes:"
	microk8s kubectl get pv

# Criar port-forward para acesso local
port-forward:
	@echo "üîó Criando port-forward na porta 9090..."
	@echo "Acesse http://localhost:9090"
	@echo "Pressione Ctrl+C para parar"
	microk8s kubectl port-forward -n $(NAMESPACE) svc/$(RELEASE_NAME)-server 9090:80

# Limpar recursos (manter PVs)
clean:
	@echo "üßπ Limpando recursos..."
	microk8s kubectl delete ingress prometheus-ingress -n $(NAMESPACE) 2>/dev/null || true
	@echo "‚úÖ Recursos limpos!"

# Desinstalar completamente
uninstall:
	@echo "üóëÔ∏è  Desinstalando Prometheus..."
	microk8s helm3 uninstall $(RELEASE_NAME) -n $(NAMESPACE) || true
	microk8s kubectl delete namespace $(NAMESPACE) || true
	@echo "‚úÖ Prometheus desinstalado!"

# Instala√ß√£o completa automatizada
install-all: check-microk8s enable-addons add-helm-repo install-prometheus expose-ingress status
	@echo ""
	@echo "üéâ Instala√ß√£o completa do Prometheus finalizada!"
	@echo ""
	@echo "üìã Pr√≥ximos passos:"
	@echo "1. Adicione ao /etc/hosts: $(shell microk8s kubectl get nodes -o wide | grep -v NAME | head -1 | awk '{print $$6}') $(DOMAIN)"
	@echo "2. Acesse: http://$(DOMAIN)"
	@echo "3. Ou use: make port-forward (para acesso local)"
	@echo ""
	@echo "üìä Para verificar status: make status"

# Configura√ß√£o alternativa com LoadBalancer (se dispon√≠vel)
expose-loadbalancer:
	@echo "‚ö° Expondo via LoadBalancer..."
	microk8s kubectl patch svc $(RELEASE_NAME)-server -n $(NAMESPACE) -p '{"spec":{"type":"LoadBalancer"}}'
	@echo "‚úÖ LoadBalancer configurado!"
	@echo "üîÑ Aguardando IP externo..."
	microk8s kubectl get svc -n $(NAMESPACE) -w

# Backup da configura√ß√£o
backup:
	@echo "üíæ Criando backup da configura√ß√£o..."
	mkdir -p backup
	microk8s helm3 get values $(RELEASE_NAME) -n $(NAMESPACE) > backup/prometheus-values.yaml
	microk8s kubectl get all -n $(NAMESPACE) -o yaml > backup/prometheus-resources.yaml
	@echo "‚úÖ Backup criado na pasta backup/"